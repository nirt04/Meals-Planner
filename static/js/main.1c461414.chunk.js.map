{"version":3,"sources":["data/meals-plane.js","modules/MealsApp/modules/MealsDraggableTable/components/Task.js","modules/MealsApp/modules/MealsDraggableTable/components/Column.js","modules/MealsApp/modules/MealsDraggableTable/components/DraggableList.js","modules/MealsApp/modules/MealsDraggableTable/MealsDraggableTable.js","modules/MealsApp/MealsApp.js","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","id","content","unitName","imgSrc","columns","title","tasksIds","columnOrder","Task","props","draggableId","task","index","provided","ref","innerRef","draggableProps","dragHandleProps","className","style","backgroundImage","onClick","e","preventDefault","href","type","disabled","value","Column","column","droppableId","droppableProps","map","i","key","placeholder","DraggableList","useState","state","setState","console","log","onDragStart","destination","source","sourceColumn","destinationColumn","newSourceTaskIds","Array","from","newDestinationTaskIds","splice","newSourceColumn","Set","newDestinationColumn","newColumns","newTaskIds","newColumn","columnId","taskId","MealsDraggableTable","useEffect","GymApp","App","MealsApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c461414.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n      \"task-1\": { id: \"task-1\", content: \"Oat & cottage pancakes\", unitName: 'pancakes', imgSrc: 'https://images.eatthismuch.com/site_media/thmb/34809_erin_m_7ef5ba84-0c6f-40ee-8654-517227f8b1d1.png' },\n      \"task-2\": { id: \"task-2\", content: \"Nonfat yogurt\", unitName: 'bowl',imgSrc: 'https://images.eatthismuch.com/site_media/thmb/473055_basic_bob_80a7757a-c736-41cc-9a73-b9194bf76ad6.png' },\n      \"task-3\": { id: \"task-3\", content: \"Apples and Almond Butter\" , unitName: 'apple', imgSrc: 'https://images.eatthismuch.com/site_media/thmb/55276_erin_m_7c06a10c-7070-49bd-ae36-b5a913f4aaf9.png'},\n      \"task-4\": { id: \"task-4\", content: \"Cottage Cheese with Banana\" , unitName: null, imgSrc: 'https://images.eatthismuch.com/site_media/thmb/331986_erin_m_778ac2b0-ec71-48da-b3c0-f7c81667d094.png'},\n      \"task-5\": { id: \"task-5\", content: \"Chicken club sandwich\" , unitName: null, imgSrc:'https://images.eatthismuch.com/site_media/thmb/33493_erin_m_52104ea7-bf52-4fb4-9ca7-a5974632c0fa.png'},\n      \"task-6\": { id: \"task-6\", content: \"Peanut Butter and Carrots Snack\" , unitName: null, imgSrc: 'https://images.eatthismuch.com/site_media/thmb/905944_Tahirah_Fo_Ferah_091669a7-37f8-42f3-bd4d-bb67a2479363.jpg'},\n    },\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"Breakfast\",\n        tasksIds: [\"task-1\", \"task-2\"]\n      },\n      \"column-2\": {\n        id: \"column-2\",\n        title: \"Lunch\",\n        tasksIds: [\"task-3\", \"task-4\"]\n      },\n      \"column-3\": {\n        id: \"column-3\",\n        title: \"Dinner\",\n        tasksIds: [\"task-5\"]\n      },\n      \"column-4\": {\n        id: \"column-4\",\n        title: \"Snack\",\n        tasksIds: [\"task-6\"]\n      }\n    },\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\", \"column-4\"]\n  };\n  \n  export default initialData;\n  ","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nexport default function Task(props) {\n  return (\n    <Draggable draggableId={props.task.id} index={props.index}>\n      {provided => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className=\"mpt--column-Task\"\n        >\n          <div className=\"mpt--task-img\" style={{backgroundImage: `url(${props.task.imgSrc || 'https://via.placeholder.com/50'})`}}  />\n          <div className=\"mpt--task-info-container\">\n            <a onClick={(e)=>e.preventDefault()} href=\"\">{props.task.content}</a>\n            <div className=\"mpt--task-unit-info\">\n              <input type=\"number\" disabled value=\"1\" />\n              <select>\n                <option value=\"gram\">gram</option>\n                <option value=\"food_unit\">\n                  {props.task.unitName || \"serving\"}\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React from \"react\";\nimport Task from \"../components/Task\";\nimport { Droppable } from \"react-beautiful-dnd\";\nexport default function Column(props) {\n  // debugger\n  // console.log(props)\n  return (\n    <div className=\"mpt--column-container\">\n      <h3>{props.column.title}</h3>\n      <Droppable droppableId={props.column.id}>\n        {(provided) => (\n          <div className=\"dragable-list--column-tasks-list\" {...provided.droppableProps} ref={provided.innerRef} >\n            {props.tasks.map((task, i) => ( <Task key={task.id} task={task} index={i} /> ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport initialData from \"../../../../../data/meals-plane\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"../components/Column\";\nimport { format } from \"util\";\nexport default function DraggableList() {\n  const [state, setState] = useState(initialData);\n  const onDragEnd = ({ destination, source, draggableId }) => {\n  debugger\nif(!destination) return\n// Logic for dragging between columns\nif (destination.droppableId !== source.droppableId || destination.index === source.index ) {\n// Store source and Destination columns\nconst sourceColumn = state.columns[source.droppableId];\nconst destinationColumn = state.columns[destination.droppableId]\n// Store new meals Ids of each columns\nconst newSourceTaskIds = Array.from(sourceColumn.tasksIds);\nconst newDestinationTaskIds = Array.from(destinationColumn.tasksIds);\n// remove meal from source column\nnewSourceTaskIds.splice(source.index, 1);\n// adding meal to the destination column\nnewDestinationTaskIds.splice(destination.index, 0, draggableId);\n// creating the new source and destintion object for state mutation\nconst newSourceColumn = { ...sourceColumn, tasksIds: Array.from(new Set(newSourceTaskIds))  };\nconst newDestinationColumn = { ...destinationColumn, tasksIds: Array.from(new Set(newDestinationTaskIds)) };\n// merging to an 1 object for state mutation\nconst newColumns = { ...state.columns, [newSourceColumn.id]: newSourceColumn, [newDestinationColumn.id]: newDestinationColumn };\n// setting the state with the new Columns object after reordering\nsetState({ ...state, columns: newColumns });\nconsole.log(newSourceTaskIds)\n}\n// Logic for draggin inside columns\n    else {\n      const column = state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.tasksIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column, tasksIds: Array.from(new Set(newTaskIds)) };\n      const newColumns = { ...state.columns, [newColumn.id]: newColumn };\n      setState({ ...state, columns: newColumns });\n    }\n\n\n  } \n\n    // TODO Add placeholder meal when colum is empty and make it visable only ondrag event so it will be easier to drag to an empty column\n \n  \n\n\n  \n  console.log(\"state:\", state);\n\n  return (\n    <DragDropContext\n      onDragStart={() => console.log(\"onDragStart\")}\n      onDragStart={() => console.log(\"onDragStart\")}\n      onDragEnd={onDragEnd}\n    >\n      {state.columnOrder.map(columnId => {\n        const column = state.columns[columnId];\n        const tasks = column.tasksIds.map(taskId => state.tasks[taskId]);\n        return <Column key={column.id} column={column} tasks={tasks} />;\n      })}\n    </DragDropContext>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport \"./MealsDraggableTable.scss\";\nimport DraggableList from \"./components/DraggableList\";\nexport default function MealsDraggableTable() {\n  useEffect(() => console.log(\"MealsPlaneTable mounted\"), []);\n  return (\n    <div>\n      <h1>hello from MealsPlaneTable </h1>\n      {/* <MaterialUiTable /> */}\n      <DraggableList />\n    </div>\n  );\n}\n","import React from \"react\";\nimport MealsDraggableTable from \"./modules/MealsDraggableTable/MealsDraggableTable\";\n\nfunction GymApp() {\n  return (\n    <div>\n      <h1>hello from meals app cmp</h1>\n      <MealsDraggableTable />\n    </div>\n  );\n}\n\nexport default GymApp;\n","import React from 'react';\n// import logo from './logo.svg';\nimport MealsApp from \"./modules/MealsApp/MealsApp\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MealsApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reset-css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}